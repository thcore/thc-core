# .github/workflows/firebase-hosting-merge.yml
# main 브랜치에 push(merge) 될 때, Firebase Hosting에 프로덕션 배포

name: Deploy to Firebase Hosting on merge

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) 리포지토리 체크아웃
      - uses: actions/checkout@v4

      # 2) Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # 3) .env.local 생성 (GitHub Secrets -> 환경 변수 주입)
      - name: Create .env.local
        run: |
          cat << EOF > .env.local
          NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          EOF

      # 4) 의존성 설치 (package-lock.json 기준)
      - name: Install dependencies
        run: npm ci
      
      # 5) Next.js 빌드 (out 폴더 생성)
      - name: Build
        run: npm run build

      # 6) Firebase Hosting 배포
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          # GitHub Actions에서 제공하는 인증 토큰
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          # Firebase 서비스 계정 (GitHub Secrets)
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_THC_NEXUS_DEV }}
          # 실제 프로덕션 채널 (live)로 배포
          channelId: live
          # Firebase 프로젝트 ID
          projectId: thc-nexus-dev
